<?xml version="1.0"?>
<!DOCTYPE bindings PUBLIC "-//MOZILLA//DTD XBL V1.0//EN" "http://www.mozilla.org/xbl">

<bindings
    xmlns="http://www.mozilla.org/xbl"
    xmlns:xbl="http://www.mozilla.org/xbl"
    xmlns:html="http://www.w3.org/1999/xhtml"
    xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

  <binding id="buddy"
           extends="chrome://instantbird/content/buddy.xml#buddy">
    <content align="center">
      <xul:stack class="prplBuddyIcon">
        <xul:image xbl:inherits="src=iconPrpl" class="protoIcon"/>
        <xul:image class="statusIcon"/>
      </xul:stack>
      <xul:label crop="end" flex="1"
                 anonid="displayname" class="buddyDisplayName"
                 xbl:inherits="value=displayname"/>
      <xul:toolbarbutton class="tab-close-button"/>
    </content>
    <implementation implements="nsIObserver">
      <method name="build">
        <parameter name="aContact"/>
        <parameter name="aGroup"/>
        <body>
        <![CDATA[
          const Cu = Components.utils;
          var scope = {};
          if (aGroup.tag == Services.Unibrow.Tag) {
            this.setAttribute("unibrow", true);
            aContact.conversation.addObserver(this);
          }

          // remember to call the previous binding's .build() method
          return this.callBaseBinding(arguments.callee, arguments);
        ]]>
        </body>
      </method>
      <method name="observe">
        <parameter name="aSubject"/>
        <parameter name="aTopic"/>
        <parameter name="aData"/>
        <body>
        <![CDATA[
          const Ci = Components.interfaces;
          const Cu = Components.utils;
          if (this.hasAttribute("unibrow")) {
            switch (aTopic) {
              case "new-text":
                if (!(aSubject instanceof Ci.purpleIMessage)) {
                  break;
                }
                let browser = Services.Unibrow.mainWindow.browser;
                let selectedConv = browser.selectedConversation.conv;
                if (selectedConv == this.contact.conversation) {
                  // this conversation is visible anyway, don't highlight
                  this.removeAttribute("unibrow-newtext");
                }
                else if (aSubject.containsNick) {
                  // this message is "important"
                  this.setAttribute("unibrow-newtext", "containsNick");
                }
                else {
                  // this message isn't interesting
                  this.setAttribute("unibrow-newtext", true);
                }
                break;
            }
          }
          return this.callBaseBinding(arguments.callee, arguments);
        ]]>
        </body>
      </method>
      <method name="openConversation">
        <body>
        <![CDATA[
          if (this.hasAttribute("unibrow")) {
            this.removeAttribute("unibrow-newtext");
          }
          return this.callBaseBinding(arguments.callee, arguments);
        ]]>
        </body>
      </method>
      <method name="callBaseBinding">
        <parameter name="aMethod"/>
        <parameter name="aArguments"/>
        <body>
        <![CDATA[
          var proto = this;
          while (proto[aMethod.name] != aMethod) {
            // in case somebody else is riding on top of us
            proto = proto.__proto__;
          }
          while (proto[aMethod.name] == aMethod) {
            // and this finds the previous .build()
            proto = proto.__proto__;
          }
          if (aMethod.name in proto) {
            return proto[aMethod.name].apply(this, Array.slice(aArguments));
          }
        ]]>
        </body>
      </method>
    </implementation>
  </binding>

  <binding id="closebutton"
           extends="chrome://instantbird/content/tabbrowser.xml#tabbrowser-close-tab-button">
    <handlers>
      <handler event="click" button="0" phase="capturing"><![CDATA[

        { /** copied from tabbrowser#tabbrowser-close-tab-button */
          if (event.detail > 1 && !this._ignoredClick) {
            return;
          }
        }
        var contact = document.getBindingParent(this).contact;
        var conversations = Services.Unibrow
                                    .mainWindow
                                    .conversations
                                    .contentDocument
                                    .getElementById("conversations");

        for each (let conv in conversations.conversations) {
          if (conv.conv == contact.conversation) {
            conversations.removeTab(conv.tab);
            break;
          }
        }

        // trick the base binding into not trying to do anything by un-applying
        // the parent binding
        document.getBindingParent(this).removeAttribute("unibrow");
        // force the styles to be re-calculated (therefore un-binding)
        this.getBoundingClientRect();

        event.stopPropagation();
        event.preventDefault();
      ]]></handler>
    </handlers>
  </binding>

</bindings>